{"version":3,"sources":["components/page/login.js","components/page/register.js","components/common/createChannel.js","components/common/channelsList.js","components/page/main.js","components/common/messagesList.js","components/common/sendMessage.js","components/page/channel.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","Container","_templateObject","Text","div","_templateObject2","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkScreenSize","mq","matches","setState","size","onNameChange","event","name","target","value","onPasswordChange","password","onLogin","state","buttonLoading","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","saveUserData","changeRoute","errorLogging","setErrorMessage","react_default","a","createElement","mobileViewport","window","matchMedia","addListener","_this2","Header","as","Segment","placeholder","Grid","columns","relaxed","stackable","Column","Form","error","Message","content","Input","icon","iconPosition","label","onChange","type","Button","loading","primary","onClick","Divider","horizontal","verticalAlign","vertical","React","Component","register_templateObject","Link","register_templateObject2","Register","onRegister","id","errorRegistering","register_StyledContainer","padded","NewChannelWrapper","createChannel_templateObject","CreateChannel","onChannelNameChange","newChannelName","onChannelDescriptionChange","newChannelDescription","createChannel","refreshChannelList","handleModalClose","errorCreating","handleModalOpen","modalOpen","Modal","trigger","open","onClose","Content","Description","ChannelsList","getChannels","channels","renderChannels","map","channel","Card","key","passChannelData","description","newChannelClicked","prevProps","refreshChannelState","Group","centered","main_templateObject","Main","main_StyledContainer","textAlign","channelsList","StyledSegment","messagesList_templateObject","MessagesList","scrollToBottom","messagesEnd","scrollIntoView","behavior","block","inline","makeDatePretty","date","Date","hh","getHours","mm","getMinutes","ss","getSeconds","renderMessages","messages","message","Comment","Avatar","src","avatarColor","Author","Metadata","showPlaceholderForMessages","messagesLoaded","length","eventSource","style","float","clear","ref","el","SendMessage","onMessageChange","messageText","onKeyPress","keyCode","sendMessage","userId","user","channelId","getMessages","resetInput","document","getElementById","reply","TextArea","onKeyDown","labelPosition","channel_templateObject","StyledHeader","channel_templateObject2","Channel","setMessagesSSE","urlWithChannelId","EventSource","onmessage","e","parse","data","close","channel_StyledContainer","channelName","messagesList","Theme","color","accent","lightGray","gray","darkGray","background","heroText","layout","contentWidthDesktop","wrapperPaddingMobile","navHeightMobile","navHeightDesktop","MainWrapper","App_templateObject","theme","App","wakeServerUp","pickRoute","route","register","main","login","page_channel","newRoute","styled_components_browser_esm","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f92993c.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Container, Button, Divider, Form, Grid, Segment, Header, Message } from 'semantic-ui-react'\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 15vh\r\n\t\tmax-width: 800px!important;\r\n\r\n\t\t@media (max-width: 767px) {\r\n\t\t  margin-top: 40px\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst Text = styled.div`\r\n\tmargin-bottom: 20px;\r\n`\r\n\r\nclass Login extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t    name: \"\",\r\n\t\t    password: \"\",\r\n\t\t    errorLogging: \"\",\r\n\t\t    size: \"\",\r\n\t\t    buttonLoading: false\r\n\t    };\r\n\t    this.mobileViewport = window.matchMedia(\"screen and (max-width: 767px)\");\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.checkScreenSize(this.mobileViewport);\r\n\t\tthis.mobileViewport.addListener(this.checkScreenSize);\r\n\t}\r\n\r\n\t// Pretty little thing that does media queries in js\r\n\tcheckScreenSize = (mq) => {\r\n\t\tmq.matches ? this.setState({ size: \"small\" }) : this.setState({ size: \"big\" });\r\n\t}\r\n\r\n\tonNameChange = (event) => {\r\n\t  \tthis.setState({name: event.target.value});\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t  \tthis.setState({password: event.target.value});\r\n\t}\r\n\r\n\tonLogin = () => {\r\n\t\tif (!this.state.name || !this.state.password) {\r\n\t\t\tthis.setState({ errorLogging: \"empty\" })\r\n\t\t} else {\r\n\t\t\tthis.setState({ buttonLoading: true });\r\n\t\t\tfetch(\"https://chattychat777.herokuapp.com/login\", {\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    name: this.state.name,\r\n\t\t\t\t    password: this.state.password,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tthis.setState({ buttonLoading: false });\r\n\t\t\t\treturn res;\r\n\t\t\t})\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res.name) {\r\n\t\t\t\t\tthis.props.saveUserData(res);\r\n\t\t\t\t\tthis.props.changeRoute(\"main\");\r\n\t\t\t\t} else if (res === \"No User\") {\r\n\t\t\t\t\tthis.setState({ errorLogging: \"noUser\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorLogging: \"error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tswitch (this.state.errorLogging) {\r\n\t\t  \tcase \"noUser\":\r\n\t\t\t    return (<div>Incorrect user or password</div>);\r\n\t\t\tcase \"error\":\r\n\t\t\t    return (<div>Error logging in. Please try again later</div>);\r\n\t\t\tcase \"empty\":\r\n\t\t\t    return (<div>Please enter name and password</div>);\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Header as=\"h1\">Chatty Chat</Header>\r\n\t  \t\t\t<Text>Welcome to Chatty Chat<br />It's a simple chat app made to practise back-end stack. <br /> You can register a new user (no e-mail required) or sign up with login: anon, pass: anon</Text>\r\n\t  \t\t\t<Segment placeholder>\r\n\t  \t\t\t    <Grid columns={2} relaxed=\"very\" stackable>\r\n\t  \t\t\t      \t<Grid.Column>\r\n\t  \t\t\t        \t<Form error>\r\n\t  \t\t\t        \t\t<Message error content={this.setErrorMessage()} />\r\n\t  \t\t\t          \t\t<Form.Input icon=\"user\" iconPosition=\"left\" label=\"Username\" placeholder=\"Username\" onChange={this.onNameChange} />\r\n\t  \t\t\t          \t\t<Form.Input icon=\"lock\" iconPosition=\"left\" label=\"Password\" type=\"password\" onChange={this.onPasswordChange} />\r\n\t  \t\t\t          \t\t{this.state.buttonLoading ? <Button loading primary content=\"Login\"/> : <Button content=\"Login\" primary onClick={this.onLogin} />}\r\n\t  \t\t\t        \t</Form>\r\n\t  \t\t\t      \t</Grid.Column>\r\n\t  \t\t\t      \t{(this.state.size===\"small\") && <Divider horizontal></Divider>}\r\n\t  \t\t\t      \t<Grid.Column verticalAlign=\"middle\">\r\n\t  \t\t\t        \t<Button content=\"Sign up\" icon=\"signup\" size=\"big\" onClick={() => this.props.changeRoute(\"register\")} />\r\n\t  \t\t\t      \t</Grid.Column>\r\n\t  \t\t\t    </Grid>\r\n\t  \t\t\t    {(this.state.size===\"big\") && <Divider vertical>Or</Divider>}\r\n\t  \t\t\t</Segment>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport { Container, Button, Form, Segment, Header, Message } from 'semantic-ui-react'\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 15vh\r\n\t\tmax-width: 400px!important;\r\n\r\n\t\t@media (max-width: 767px) {\r\n\t\t  margin-top: 40px\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst Link = styled.a`\r\n\tdisplay: block;\r\n\tpadding-top: 10px;\r\n\ttext-decoration: underline;\r\n\tcursor: pointer;\r\n\tcolor: inherit;\r\n`\r\n\r\nclass Register extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t    name: \"\",\r\n\t\t    password: \"\",\r\n\t\t    errorRegistering: \"no\",\r\n\t\t    buttonLoading: false\r\n\t    }\r\n\t}\r\n\r\n\tonNameChange = (event) => {\r\n\t  \tthis.setState({name: event.target.value});\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t  \tthis.setState({password: event.target.value});\r\n\t}\r\n\r\n\tonRegister = () => {\r\n\t\tif (!this.state.name || !this.state.password) {\r\n\t\t\tthis.setState({ errorRegistering: \"Empty\" });\r\n\t\t} else {\r\n\t\t\tthis.setState({ buttonLoading: true });\r\n\t\t\tfetch(\"https://chattychat777.herokuapp.com/register\", {\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    name: this.state.name,\r\n\t\t\t\t    password: this.state.password,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tthis.setState({ buttonLoading: false });\r\n\t\t\t\treturn res;\r\n\t\t\t})\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res.id) {\r\n\t\t\t\t\tthis.props.saveUserData({\r\n\t\t\t\t\t\tid: res.id,\r\n\t\t\t\t\t\tname: this.state.name\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.props.changeRoute(\"main\");\r\n\t\t\t\t} else if (res === \"Existing\") {\r\n\t\t\t\t\tthis.setState({ errorRegistering: \"Existing\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorRegistering: \"Error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tswitch (this.state.errorRegistering) {\r\n\t\t  \tcase \"Existing\":\r\n\t\t\t    return (<div>User already exists</div>);\r\n\t\t\tcase \"Error\":\r\n\t\t\t    return (<div>Error registering. Please try again later</div>);\r\n\t\t\tcase \"Empty\":\r\n\t\t\t    return (<div>Please enter name and password</div>);\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Header as=\"h1\">Register</Header>\r\n\t  \t\t\t<Segment placeholder padded=\"very\">\r\n\t\t        \t<Form error>\r\n\t\t        \t\t<Message error content={this.setErrorMessage()} />\r\n\t\t          \t\t<Form.Input icon=\"user\" iconPosition=\"left\" label=\"Username\" placeholder=\"Username\" onChange={this.onNameChange} />\r\n\t\t          \t\t<Form.Input icon=\"lock\" iconPosition=\"left\" label=\"Password\" type=\"password\" onChange={this.onPasswordChange} />\r\n\t\t          \t\t{this.state.buttonLoading ? <Button loading primary content=\"Register\"/> : <Button content=\"Register\" primary onClick={this.onRegister} />}\r\n\t\t          \t\t<Link onClick={() => this.props.changeRoute(\"login\")}>Back to login</Link>\r\n\t\t        \t</Form>\r\n\t  \t\t\t</Segment>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport { Button, Modal, Message, Form } from 'semantic-ui-react'\r\n\r\nconst NewChannelWrapper = styled.div`\r\n\t\r\n`\r\n\r\nclass CreateChannel extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelName: \"\",\r\n\t\t\tnewChannelDescription: \"\",\r\n\t\t\terrorCreating: \"\",\r\n\t\t\tmodalOpen: false\r\n\t    }\r\n\t}\r\n\r\n\tonChannelNameChange = (event) => {\r\n\t\tthis.setState({ newChannelName: event.target.value });\r\n\t}\r\n\r\n\tonChannelDescriptionChange = (event) => {\r\n\t\tthis.setState({ newChannelDescription: event.target.value });\r\n\t}\r\n\r\n\tcreateChannel = () => {\r\n\t\tif (!this.state.newChannelName || !this.state.newChannelDescription) {\r\n\t\t\tthis.setState({ errorCreating: \"Empty\" });\r\n\t\t} else {\r\n\t\t\tfetch(\"https://chattychat777.herokuapp.com/createChannel\", {\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\theaders: {\"Content-Type\": \"application/json\"},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    newChannelName: this.state.newChannelName,\r\n\t\t\t\t    newChannelDescription: this.state.newChannelDescription,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res === \"Channel Added\") {\r\n\t\t\t\t\tthis.props.refreshChannelList();\r\n\t\t\t\t\tthis.handleModalClose();\r\n\t\t\t\t} else if (res === \"Existing\") {\r\n\t\t\t\t\tthis.setState({ errorCreating: \"Existing\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorCreating: \"Error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tswitch (this.state.errorCreating) {\r\n\t\t  \tcase \"Existing\":\r\n\t\t\t    return (<div>Channel with that name already exists</div>);\r\n\t\t\tcase \"Error\":\r\n\t\t\t    return (<div>Error creating channel. Please try again later</div>);\r\n\t\t\tcase \"Empty\":\r\n\t\t\t    return (<div>Please enter channel name and description</div>);\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\thandleModalOpen = () => this.setState({ modalOpen: true });\r\n\r\n\thandleModalClose = () => this.setState({ modalOpen: false });\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<NewChannelWrapper>\r\n\t\t\t\t<Modal \r\n\t\t\t\t\ttrigger={<Button onClick={this.handleModalOpen}>New Channel</Button>}\r\n\t\t\t\t\tsize=\"mini\"\r\n\t\t\t\t\topen={this.state.modalOpen}\r\n\t\t\t\t\tonClose={this.handleModalClose}\r\n\t\t\t\t>\r\n\t\t\t\t    <Modal.Header>Create channel</Modal.Header>\r\n\t\t\t\t    <Modal.Content>\r\n\t\t\t\t      \t<Modal.Description>\r\n\t\t\t      \t\t\t<Form error>\r\n\t\t\t      \t\t\t\t<Message\r\n\t\t\t      \t\t\t\t    error\r\n\t\t\t      \t\t\t\t    content={this.setErrorMessage()}\r\n\t\t\t      \t\t\t\t/>\r\n\t\t\t      \t\t  \t\t<Form.Input label=\"Channel name\" placeholder=\"Channel name\" onChange={this.onChannelNameChange} />\r\n\t\t\t      \t\t  \t\t<Form.Input label=\"Description\" type=\"Description\" onChange={this.onChannelDescriptionChange} />\r\n\t\t\t      \t\t  \t\t<Button content=\"Create\" primary onClick={this.createChannel} />\r\n\t\t\t      \t\t\t</Form>\r\n\t\t\t\t      \t</Modal.Description>\r\n\t\t\t\t    </Modal.Content>\r\n\t\t\t\t</Modal>\r\n\t\t\t</NewChannelWrapper>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CreateChannel;","import React from 'react';\r\n\r\n\r\nimport { Card, Segment } from 'semantic-ui-react'\r\n\r\n\r\n\r\nclass ChannelsList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelClicked: false,\r\n\t\t\tchannels: []\r\n\t    }\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getChannels();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\t(prevProps.refreshChannelState !== this.props.refreshChannelState) && (this.getChannels());\r\n\t}\r\n\r\n\tgetChannels = () => {\r\n\t\tfetch(\"https://chattychat777.herokuapp.com/channelsList\")\r\n\t\t.then(res => res.json())\r\n\t\t.then(res => {this.setState({channels: res})})\r\n\t}\r\n\r\n\trenderChannels = () => {\r\n\t\treturn this.state.channels.map(channel => (\r\n\t\t\t<Card key={channel.id} onClick={() => {\r\n\t\t\t\tthis.props.changeRoute(\"channel\");\r\n\t\t\t\tthis.props.passChannelData(channel.id, channel.name)\r\n\t\t\t\t}}>\r\n\t\t\t  <Card.Content>\r\n\t\t\t    <Card.Header>{channel.name}</Card.Header>\r\n\t\t\t    <Card.Description>{channel.description}</Card.Description>\r\n\t\t\t  </Card.Content>\r\n\t\t\t</Card>\r\n\t\t))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Segment placeholder>\r\n\t\t\t\t<Card.Group centered>\r\n\t\t\t\t\t{this.renderChannels()}\r\n\t\t\t\t</Card.Group>\r\n\t\t\t</Segment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ChannelsList;","import React from 'react';\r\nimport CreateChannel from '../common/createChannel'\r\nimport ChannelsList from '../common/channelsList'\r\nimport styled from 'styled-components'\r\n\r\nimport { Header, Container, Segment } from 'semantic-ui-react'\r\n\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\tmargin-top: 60px;\r\n\t\tmax-width: 800px!important;\r\n\t}\r\n`\r\n\r\nclass Main extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelName: \"\",\r\n\t\t\trefreshChannelState: 0\r\n\t    }\r\n\t}\r\n\r\n\t// This will tell ChannelsList when to refresh channels when a new one is created\r\n\trefreshChannelList = () => {\r\n\t\tthis.setState({ refreshChannelState: this.state.refreshChannelState+1 });\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Segment>\r\n\t  \t\t\t\t<Header as=\"h1\" textAlign=\"center\">Channels</Header>\r\n\t  \t\t\t\t<ChannelsList refreshChannelState={this.state.refreshChannelState} changeRoute={this.props.changeRoute} passChannelData={this.props.passChannelData}/>\r\n\t  \t\t\t</Segment>\r\n\t  \t\t\t<CreateChannel refreshChannelList={this.refreshChannelList}/>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\n\r\n\r\nexport default Main;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Comment, Segment } from 'semantic-ui-react'\r\n\r\nconst StyledSegment = styled(Segment)`\r\n\theight: 300px;\r\n\toverflow: auto;\r\n`\r\n\r\nclass MessagesList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t    };\r\n\t    this.eventSource = \"\";\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\r\n\t// Scrolls to the bottom of chat window (newest message)\r\n\tscrollToBottom = () => { \r\n\t  this.messagesEnd.scrollIntoView({ behavior: \"smooth\", block: \"nearest\", inline: \"start\" });\r\n\t}\r\n\r\n\tmakeDatePretty = (date) => {\r\n\t\tlet a = new Date(date)\r\n\t\tlet hh = a.getHours();\r\n\t\tlet mm = a.getMinutes();\r\n\t\tlet ss = a.getSeconds();\r\n\t\t(mm < 10) && (mm = \"0\" + mm);\r\n\t\t(ss < 10) && (ss = \"0\" + ss);\r\n\t\tlet finalDate = hh + \":\" + mm + \":\" + ss;\r\n\t\treturn finalDate;\r\n\t}\r\n\r\n\trenderMessages = () => {\r\n\t\treturn (this.props.messages.map(message => \r\n\t\t\t<Comment key={message.id}>\r\n\t\t\t   \t<Comment.Avatar src={\"https://ui-avatars.com/api/?name=\" + message.name + \"&background=\" + message.avatarColor + \"&length=1&rounded=true\"} />\r\n\t\t\t   \t<Comment.Content>\r\n\t\t\t     \t<Comment.Author as=\"a\">{message.name}</Comment.Author>\r\n\t\t\t     \t<Comment.Metadata>\r\n\t\t\t       \t\t<div>{this.makeDatePretty(message.date)}</div>\r\n\t\t\t     \t</Comment.Metadata>\r\n\t\t\t     \t<Comment.Text>{message.content}</Comment.Text>\r\n\t\t\t   </Comment.Content>\r\n\t\t\t</Comment>\r\n\t\t))\t\r\n\t}\r\n\t// Math.floor(Math.random()*16777215).toString(16) // TODO // Random hex color for avatars \r\n\r\n\tshowPlaceholderForMessages = () => {\r\n\t\tif (this.props.messagesLoaded === true) {\r\n\t\t\treturn (this.props.messages.length < 1) && (<div>Your message will be the first one</div>)\r\n\t\t} else {\r\n\t\t\treturn (<div>Loading messages...</div>)\r\n\t\t} \r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<StyledSegment>\r\n\t\t\t\t{this.showPlaceholderForMessages()}\r\n\t\t\t\t<Comment.Group>\r\n\t\t\t\t\t{this.renderMessages()}\r\n\t\t\t\t</Comment.Group>\r\n\t\t\t\t<div style={{ float:\"left\", clear: \"both\" }} // Dummy div needed to scroll to the bottom of chat window (scrollToBottom)\r\n\t\t\t\t    ref={el => { this.messagesEnd = el; }} />\r\n\t\t\t</StyledSegment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MessagesList;","import React from 'react';\r\n\r\nimport { Form, Button } from 'semantic-ui-react'\r\n\r\nclass SendMessage extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmessageText: \"\",\r\n\t    };\r\n\t}\r\n\r\n\tonMessageChange = (event) => {\r\n\t\tthis.setState({ messageText: event.target.value });\r\n\t}\r\n\r\n\tonKeyPress = (event) => {\r\n\t    (event.keyCode === 13) && this.sendMessage();\r\n\t}\r\n\r\n\tsendMessage = () => {\r\n\t\tthis.state.messageText && fetch(\"https://chattychat777.herokuapp.com/sendMessage\", {\r\n\t\t\tmethod: \"post\",\r\n\t\t\theaders: {\"Content-Type\": \"application/json\"},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t    content: this.state.messageText,\r\n\t\t\t    userId: this.props.user.id,\r\n\t\t\t    channelId: this.props.channelId,\r\n\t\t\t})\r\n\t\t})\r\n\t\t.then(() => this.props.getMessages(this.props.channelId))\r\n\t\t.then(() => this.resetInput())\r\n\t}\r\n\r\n\tresetInput = () => {\r\n\t    const resetButton = document.getElementById(\"messageInput\");\r\n\t    resetButton.value = \"\";\r\n\t    this.setState({ messageText: \"\" });\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Form reply>\r\n\t\t\t    <Form.TextArea onChange={this.onMessageChange} onKeyDown={this.onKeyPress} placeholder=\"Message text\" id=\"messageInput\"/>\r\n\t\t\t    <Button onClick={this.sendMessage} content=\"Send\" labelPosition=\"left\" icon=\"edit\" primary />\r\n\t\t\t    <Button onClick={() => {this.props.changeRoute(\"main\")}}>Back</Button>\r\n\t\t\t</Form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport MessagesList from '../common/messagesList'\r\nimport SendMessage from '../common/sendMessage'\r\n\r\nimport { Container, Header } from 'semantic-ui-react'\r\n\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\tmargin-top: 60px;\r\n\t\tmax-width: 800px!important;\r\n\t}\r\n`\r\n\r\nconst StyledHeader = styled(Header)`\r\n\tcolor: #666;\r\n`\r\n\r\nclass Channel extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmessages: [],\r\n\t\t\tmessagesLoaded: false\r\n\t    };\r\n\t    this.eventSource = \"\"\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getMessages();\r\n\t\tthis.setMessagesSSE();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.eventSource.close();\r\n\t}\r\n\r\n\tgetMessages = () => {\r\n\t\tfetch(\"https://chattychat777.herokuapp.com/messagesList\", {\r\n\t\t\tmethod: \"post\",\r\n\t\t\theaders: {\"Content-Type\": \"application/json\"},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t    channelId: this.props.channelId\r\n\t\t\t})\r\n\t\t})\r\n\t\t.then(res => res.json())\r\n\t\t.then(res => this.setState({messages: res, messagesLoaded: true}))\r\n\t}\r\n\r\n\t//Server Sent Events listener that gets messages when sb writes new one\r\n\tsetMessagesSSE = () => { \r\n\t\tconst urlWithChannelId = \"https://chattychat777.herokuapp.com/messagesListSSE/\" + this.props.channelId // Allows to send proper SSE messages from server\r\n\t\tthis.eventSource = new EventSource(urlWithChannelId);\r\n\t\tthis.eventSource.onmessage = (e) => {\r\n\t\t\tthis.setState({messages: JSON.parse(e.data)}); \r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<StyledContainer>\r\n\t\t\t\t<StyledHeader as=\"h1\">{this.props.channelName}</StyledHeader>\r\n\t\t\t\t<MessagesList messages={this.state.messages} messagesLoaded={this.state.messagesLoaded}/>\r\n\t\t\t\t<SendMessage changeRoute={this.props.changeRoute} getMessages={this.getMessages} channelId={this.props.channelId} user={this.props.user}/>\r\n\t\t\t</StyledContainer>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Channel;","export const Theme = {\r\n  color: {\r\n    accent: '#35CC62',\r\n    lightGray: '#878787',\r\n    gray: '#666666',\r\n    darkGray: '#333333',\r\n    background: `#FFFFFF`,\r\n    heroText: `#FFFFFF`,\r\n  },\r\n  layout: {\r\n    contentWidthDesktop: '1240px',\r\n    wrapperPaddingMobile: '80px 20px 0 20px',\r\n    navHeightMobile: '60px',\r\n    navHeightDesktop: '80px',\r\n  },\r\n};","import React, { Component } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport Login from './components/page/login.js';\nimport Register from './components/page/register.js';\nimport Main from './components/page/main.js';\nimport Channel from './components/page/channel.js'\nimport { Theme } from './theme.js';\nimport './fonts.css';\n\nconst MainWrapper = styled.div`\n\tcolor: ${props => props.theme.color.darkGray};\n`\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\troute: \"login\",\n\t\t\tchannelId: 0,\n\t\t\tchannelName: \"\",\n\t\t\tuser: {}\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.wakeServerUp();\n\t}\n\n\t// Needed because heroku goes to sleep when idle. User will be able to do stuff faster\n\twakeServerUp = () => {\n\t\tfetch(\"https://chattychat777.herokuapp.com/\");\n\t}\n\n\tpickRoute = () => {\n\t\tswitch (this.state.route) {\n\t\t  \tcase \"register\":\n\t\t\t    return (<Register changeRoute={this.changeRoute} saveUserData={this.saveUserData}/>);\n\t\t\tcase \"main\":\n\t\t\t    return (<Main changeRoute={this.changeRoute} passChannelData={this.passChannelData} user={this.state.user}/>);\n\t\t\tcase \"login\":\n\t\t\t    return (<Login changeRoute={this.changeRoute} saveUserData={this.saveUserData}/>);\n\t\t\tcase \"channel\":\n\t\t\t    return (<Channel changeRoute={this.changeRoute} channelId={this.state.channelId} channelName={this.state.channelName} user={this.state.user}/>);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tchangeRoute = (newRoute, channelId) => {\n\t\tthis.setState({route: newRoute});\n\t}\n\n\t// Saving data from db\n\tsaveUserData = (data) => {\n\t\tthis.setState({ user: data})\n\t}\n\n\t// takes channel Id and Name of clicked channel from Main component to pass it to Channel\n\tpassChannelData = (channelId, channelName) => {\n\t\tthis.setState({ channelName: channelName});\n\t\tthis.setState({ channelId: channelId});\n\t}\n\n  \trender() {\n\t\treturn (\n\t\t  \t<ThemeProvider theme={Theme}>\n\t\t  \t\t<MainWrapper>\n\t\t  \t\t\t{this.pickRoute()}\n\t\t  \t\t</MainWrapper>\n\t\t  \t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
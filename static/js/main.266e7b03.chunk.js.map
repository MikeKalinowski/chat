{"version":3,"sources":["components/page/login.js","components/page/register.js","components/common/createChannel.js","components/common/channelsList.js","components/page/main.js","components/common/messagesList.js","components/common/sendMessage.js","components/page/channel.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["StyledContainer","styled","Container","_templateObject","Text","div","_templateObject2","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkScreenSize","mq","matches","setState","size","onNameChange","event","name","target","value","onPasswordChange","password","onLogin","state","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","saveUserData","changeRoute","errorLogging","setErrorMessage","react_default","a","createElement","mobileViewport","window","matchMedia","addListener","_this2","Header","as","Segment","placeholder","Grid","columns","relaxed","stackable","Column","Form","error","Message","content","Input","icon","iconPosition","label","onChange","type","Button","primary","onClick","Divider","horizontal","verticalAlign","vertical","React","Component","register_templateObject","Link","register_templateObject2","Register","onRegister","id","errorRegistering","register_StyledContainer","padded","NewChannelWrapper","createChannel_templateObject","CreateChannel","onChannelNameChange","newChannelName","onChannelDescriptionChange","newChannelDescription","createChannel","refreshChannelList","handleModalClose","errorCreating","handleModalOpen","modalOpen","Modal","trigger","open","onClose","Content","Description","ChannelsList","getChannels","channels","renderChannels","map","channel","Card","key","description","newChannelClicked","prevProps","refreshChannelState","Group","centered","main_templateObject","Main","main_StyledContainer","textAlign","channelsList","StyledSegment","messagesList_templateObject","MessagesList","scrollToBottom","messagesEnd","scrollIntoView","behavior","block","inline","makeDatePretty","date","Date","hh","getHours","mm","getMinutes","ss","getSeconds","renderMessages","messages","message","Comment","Avatar","src","avatarColor","Author","Metadata","showPlaceholderForMessages","messagesLoaded","length","eventSource","style","float","clear","ref","el","SendMessage","onMessageChange","messageText","onKeyPress","keyCode","sendMessage","userId","user","channelId","getMessages","resetInput","document","getElementById","reply","TextArea","onKeyDown","labelPosition","channel_templateObject","Channel","setMessagesSSE","urlWithChannelId","EventSource","onmessage","e","parse","data","close","channel_StyledContainer","messagesList","Theme","color","accent","lightGray","gray","darkGray","background","heroText","layout","contentWidthDesktop","wrapperPaddingMobile","navHeightMobile","navHeightDesktop","MainWrapper","App_templateObject","theme","App","wakeServerUp","pickRoute","route","register","main","login","page_channel","newRoute","styled_components_browser_esm","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.266e7b03.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Container, Button, Divider, Form, Grid, Segment, Header, Message } from 'semantic-ui-react'\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 15vh\r\n\t\tmax-width: 800px!important;\r\n\r\n\t\t@media (max-width: 767px) {\r\n\t\t  margin-top: 40px\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst Text = styled.div`\r\n\tmargin-bottom: 20px;\r\n`\r\n\r\nclass Login extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t    name: \"\",\r\n\t\t    password: \"\",\r\n\t\t    errorLogging: \"\",\r\n\t\t    size: \"\",\r\n\t    };\r\n\t    this.mobileViewport = window.matchMedia(\"screen and (max-width: 767px)\");\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.checkScreenSize(this.mobileViewport);\r\n\t\tthis.mobileViewport.addListener(this.checkScreenSize);\r\n\t}\r\n\r\n\t// Pretty little thing that does media queries in js\r\n\tcheckScreenSize = (mq) => {\r\n\t\tmq.matches ? this.setState({ size: \"small\" }) : this.setState({ size: \"big\" });\r\n\t}\r\n\r\n\tonNameChange = (event) => {\r\n\t  \tthis.setState({name: event.target.value});\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t  \tthis.setState({password: event.target.value});\r\n\t}\r\n\r\n\tonLogin = () => {\r\n\t\tif (!this.state.name || !this.state.password) {\r\n\t\t\tthis.setState({ errorLogging: \"empty\" })\r\n\t\t} else {\r\n\t\t\tfetch('https://chattychat777.herokuapp.com/login', {\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    name: this.state.name,\r\n\t\t\t\t    password: this.state.password,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res.name) {\r\n\t\t\t\t\tthis.props.saveUserData(res);\r\n\t\t\t\t\tthis.props.changeRoute(\"main\");\r\n\t\t\t\t} else if (res === \"No User\") {\r\n\t\t\t\t\tthis.setState({ errorLogging: \"noUser\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorLogging: \"error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tif (this.state.errorLogging === \"noUser\") {\r\n\t\t\treturn (<div>Incorrect user or password</div>)\r\n\t\t} else if (this.state.errorLogging === \"error\") {\r\n\t\t\treturn (<div>Error logging in. Please try again later</div>)\r\n\t\t} else if (this.state.errorLogging === \"empty\") {\r\n\t\t\treturn (<div>Please enter name and password</div>)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Header as='h1'>Chatty Chat</Header>\r\n\t  \t\t\t<Text>Welcome to Chatty Chat<br />It's a simple chat app made to practise back-end stack. <br /> You can register a new user (no e-mail required) or sign up with login: anon, pass: anon</Text>\r\n\t  \t\t\t<Segment placeholder>\r\n\t  \t\t\t    <Grid columns={2} relaxed='very' stackable>\r\n\t  \t\t\t      \t<Grid.Column>\r\n\t  \t\t\t        \t<Form error>\r\n\t  \t\t\t        \t\t<Message error content={this.setErrorMessage()} />\r\n\t  \t\t\t          \t\t<Form.Input icon='user' iconPosition='left' label='Username' placeholder='Username' onChange={this.onNameChange} />\r\n\t  \t\t\t          \t\t<Form.Input icon='lock' iconPosition='left' label='Password' type='password' onChange={this.onPasswordChange} />\r\n\t  \t\t\t          \t\t<Button content='Login' primary onClick={this.onLogin} />\r\n\t  \t\t\t        \t</Form>\r\n\t  \t\t\t      \t</Grid.Column>\r\n\t  \t\t\t      \t{(this.state.size===\"small\") && <Divider horizontal></Divider>}\r\n\t  \t\t\t      \t<Grid.Column verticalAlign='middle'>\r\n\t  \t\t\t        \t<Button content='Sign up' icon='signup' size='big' onClick={() => this.props.changeRoute(\"register\")} />\r\n\t  \t\t\t      \t</Grid.Column>\r\n\t  \t\t\t    </Grid>\r\n\t  \t\t\t    {(this.state.size===\"big\") && <Divider vertical>Or</Divider>}\r\n\t  \t\t\t</Segment>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport { Container, Button, Form, Segment, Header, Message } from 'semantic-ui-react'\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\ttext-align: center;\r\n\t\tmargin-top: 15vh\r\n\t\tmax-width: 400px!important;\r\n\r\n\t\t@media (max-width: 767px) {\r\n\t\t  margin-top: 40px\r\n\t\t}\r\n\t}\r\n`\r\n\r\nconst Link = styled.a`\r\n\tdisplay: block;\r\n\tpadding-top: 10px;\r\n\ttext-decoration: underline;\r\n\tcursor: pointer;\r\n\tcolor: inherit;\r\n`\r\n\r\nclass Register extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t    name: \"\",\r\n\t\t    password: \"\",\r\n\t\t    errorRegistering: \"no\"\r\n\t    }\r\n\t}\r\n\r\n\tonNameChange = (event) => {\r\n\t  \tthis.setState({name: event.target.value});\r\n\t}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t  \tthis.setState({password: event.target.value});\r\n\t}\r\n\r\n\tonRegister = () => {\r\n\t\tif (!this.state.name || !this.state.password) {\r\n\t\t\tthis.setState({ errorRegistering: \"Empty\" });\r\n\t\t} else {\r\n\t\t\tfetch('https://chattychat777.herokuapp.com/register', {\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    name: this.state.name,\r\n\t\t\t\t    password: this.state.password,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res.id) {\r\n\t\t\t\t\tthis.props.saveUserData({\r\n\t\t\t\t\t\tid: res.id,\r\n\t\t\t\t\t\tname: this.state.name\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.props.changeRoute(\"main\");\r\n\t\t\t\t} else if (res === \"Existing\") {\r\n\t\t\t\t\tthis.setState({ errorRegistering: \"Existing\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorRegistering: \"Error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tif (this.state.errorRegistering === \"Existing\") {\r\n\t\t\treturn (<div>User already exists</div>)\r\n\t\t} else if (this.state.errorRegistering === \"Error\") {\r\n\t\t\treturn (<div>Error registering. Please try again later</div>)\r\n\t\t} else if (this.state.errorRegistering === \"Empty\") {\r\n\t\t\treturn (<div>Please enter name and password</div>)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Header as='h1'>Register</Header>\r\n\t  \t\t\t<Segment placeholder padded='very'>\r\n\t\t        \t<Form error>\r\n\t\t        \t\t<Message error content={this.setErrorMessage()} />\r\n\t\t          \t\t<Form.Input icon='user' iconPosition='left' label='Username' placeholder='Username' onChange={this.onNameChange} />\r\n\t\t          \t\t<Form.Input icon='lock' iconPosition='left' label='Password' type='password' onChange={this.onPasswordChange} />\r\n\t\t          \t\t<Button content='Register' primary onClick={this.onRegister} />\r\n\t\t          \t\t<Link onClick={() => this.props.changeRoute(\"login\")}>Back to login</Link>\r\n\t\t        \t</Form>\r\n\t  \t\t\t</Segment>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport { Button, Modal, Message, Form } from 'semantic-ui-react'\r\n\r\nconst NewChannelWrapper = styled.div`\r\n\t\r\n`\r\n\r\nclass CreateChannel extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelName: \"\",\r\n\t\t\tnewChannelDescription: \"\",\r\n\t\t\terrorCreating: \"\",\r\n\t\t\tmodalOpen: false\r\n\t    }\r\n\t}\r\n\r\n\tonChannelNameChange = (event) => {\r\n\t\tthis.setState({ newChannelName: event.target.value });\r\n\t}\r\n\r\n\tonChannelDescriptionChange = (event) => {\r\n\t\tthis.setState({ newChannelDescription: event.target.value });\r\n\t}\r\n\r\n\tcreateChannel = () => {\r\n\t\tif (!this.state.newChannelName || !this.state.newChannelDescription) {\r\n\t\t\tthis.setState({ errorCreating: \"Empty\" });\r\n\t\t} else {\r\n\t\t\tfetch('https://chattychat777.herokuapp.com/createChannel', {\r\n\t\t\t\tmethod: 'post',\r\n\t\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t    newChannelName: this.state.newChannelName,\r\n\t\t\t\t    newChannelDescription: this.state.newChannelDescription,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (res === \"Channel Added\") {\r\n\t\t\t\t\tthis.props.refreshChannelList();\r\n\t\t\t\t\tthis.handleModalClose();\r\n\t\t\t\t} else if (res === \"Existing\") {\r\n\t\t\t\t\tthis.setState({ errorCreating: \"Existing\" });\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ errorCreating: \"Error\" });\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tsetErrorMessage = () => {\r\n\t\tif (this.state.errorCreating === \"Existing\") {\r\n\t\t\treturn (<div>Channel with that name already exists</div>)\r\n\t\t} else if (this.state.errorCreating === \"Error\") {\r\n\t\t\treturn (<div>Error creating channel. Please try again later</div>)\r\n\t\t} else if (this.state.errorCreating === \"Empty\") {\r\n\t\t\treturn (<div>Please enter channel name and description</div>)\r\n\t\t}\r\n\t}\r\n\r\n\thandleModalOpen = () => this.setState({ modalOpen: true });\r\n\r\n\thandleModalClose = () => this.setState({ modalOpen: false });\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<NewChannelWrapper>\r\n\t\t\t\t<Modal \r\n\t\t\t\t\ttrigger={<Button onClick={this.handleModalOpen}>New Channel</Button>}\r\n\t\t\t\t\tsize=\"mini\"\r\n\t\t\t\t\topen={this.state.modalOpen}\r\n\t\t\t\t\tonClose={this.handleModalClose}\r\n\t\t\t\t>\r\n\t\t\t\t    <Modal.Header>Create channel</Modal.Header>\r\n\t\t\t\t    <Modal.Content>\r\n\t\t\t\t      \t<Modal.Description>\r\n\t\t\t      \t\t\t<Form error>\r\n\t\t\t      \t\t\t\t<Message\r\n\t\t\t      \t\t\t\t    error\r\n\t\t\t      \t\t\t\t    content={this.setErrorMessage()}\r\n\t\t\t      \t\t\t\t/>\r\n\t\t\t      \t\t  \t\t<Form.Input label='Channel name' placeholder='Channel name' onChange={this.onChannelNameChange} />\r\n\t\t\t      \t\t  \t\t<Form.Input label='Description' type='Description' onChange={this.onChannelDescriptionChange} />\r\n\t\t\t      \t\t  \t\t<Button content='Create' primary onClick={this.createChannel} />\r\n\t\t\t      \t\t\t</Form>\r\n\t\t\t\t      \t</Modal.Description>\r\n\t\t\t\t    </Modal.Content>\r\n\t\t\t\t</Modal>\r\n\t\t\t</NewChannelWrapper>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CreateChannel;","import React from 'react';\r\n\r\n\r\nimport { Card, Segment } from 'semantic-ui-react'\r\n\r\n\r\n\r\nclass ChannelsList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelClicked: false,\r\n\t\t\tchannels: []\r\n\t    }\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getChannels();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\t(prevProps.refreshChannelState !== this.props.refreshChannelState) && (this.getChannels());\r\n\t}\r\n\r\n\tgetChannels = () => {\r\n\t\tfetch('https://chattychat777.herokuapp.com/channelsList')\r\n\t\t.then(res => res.json())\r\n\t\t.then(res => {this.setState({channels: res})})\r\n\t}\r\n\r\n\trenderChannels = () => {\r\n\t\treturn this.state.channels.map(channel => (\r\n\t\t\t<Card key={channel.id} onClick={() => this.props.changeRoute(\"channel\", channel.id)}>\r\n\t\t\t  <Card.Content>\r\n\t\t\t    <Card.Header>{channel.name}</Card.Header>\r\n\t\t\t    <Card.Description>{channel.description}</Card.Description>\r\n\t\t\t  </Card.Content>\r\n\t\t\t</Card>\r\n\t\t))\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Segment placeholder>\r\n\t\t\t\t<Card.Group centered>\r\n\t\t\t\t\t{this.renderChannels()}\r\n\t\t\t\t</Card.Group>\r\n\t\t\t</Segment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ChannelsList;","import React from 'react';\r\nimport CreateChannel from '../common/createChannel'\r\nimport ChannelsList from '../common/channelsList'\r\nimport styled from 'styled-components'\r\n\r\nimport { Header, Container, Segment } from 'semantic-ui-react'\r\n\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\tmargin-top: 60px;\r\n\t\tmax-width: 800px!important;\r\n\t}\r\n`\r\n\r\nclass Main extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tnewChannelName: \"\",\r\n\t\t\trefreshChannelState: 0\r\n\t    }\r\n\t}\r\n\r\n\t// This will tell ChannelsList when to refresh channels when a new one is created\r\n\trefreshChannelList = () => {\r\n\t\tthis.setState({ refreshChannelState: this.state.refreshChannelState+1 });\r\n\t}\r\n\r\n\trender() {\r\n\t  \treturn(\r\n\t  \t\t<StyledContainer>\r\n\t  \t\t\t<Segment>\r\n\t  \t\t\t\t<Header as='h1' textAlign=\"center\">Channels</Header>\r\n\t  \t\t\t\t<ChannelsList refreshChannelState={this.state.refreshChannelState} changeRoute={this.props.changeRoute}/>\r\n\t  \t\t\t</Segment>\r\n\t  \t\t\t<CreateChannel refreshChannelList={this.refreshChannelList}/>\r\n\t  \t\t</StyledContainer>\r\n\t  \t)\r\n\t}\t\r\n}\r\n\r\n\r\n\r\nexport default Main;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Comment, Segment } from 'semantic-ui-react'\r\n\r\nconst StyledSegment = styled(Segment)`\r\n\theight: 300px;\r\n\toverflow: auto;\r\n`\r\n\r\nclass MessagesList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t    };\r\n\t    this.eventSource = \"\";\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\r\n\t// Scrolls to the bottom of chat window (newest message)\r\n\tscrollToBottom = () => { \r\n\t  this.messagesEnd.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });\r\n\t}\r\n\r\n\tmakeDatePretty = (date) => {\r\n\t\tlet a = new Date(date)\r\n\t\tlet hh = a.getHours();\r\n\t\tlet mm = a.getMinutes();\r\n\t\tlet ss = a.getSeconds();\r\n\t\t(mm < 10) && (mm = '0' + mm);\r\n\t\t(ss < 10) && (ss = '0' + ss);\r\n\t\tlet finalDate = hh + \":\" + mm + \":\" + ss;\r\n\t\treturn finalDate;\r\n\t}\r\n\r\n\trenderMessages = () => {\r\n\t\treturn (this.props.messages.map(message => \r\n\t\t\t<Comment key={message.id}>\r\n\t\t\t   \t<Comment.Avatar src={\"https://ui-avatars.com/api/?name=\" + message.name + \"&background=\" + message.avatarColor + \"&length=1&rounded=true\"} />\r\n\t\t\t   \t<Comment.Content>\r\n\t\t\t     \t<Comment.Author as='a'>{message.name}</Comment.Author>\r\n\t\t\t     \t<Comment.Metadata>\r\n\t\t\t       \t\t<div>{this.makeDatePretty(message.date)}</div>\r\n\t\t\t     \t</Comment.Metadata>\r\n\t\t\t     \t<Comment.Text>{message.content}</Comment.Text>\r\n\t\t\t   </Comment.Content>\r\n\t\t\t</Comment>\r\n\t\t))\t\r\n\t}\r\n\t// Math.floor(Math.random()*16777215).toString(16) // TODO // Random hex color for avatars \r\n\r\n\tshowPlaceholderForMessages = () => {\r\n\t\tif (this.props.messagesLoaded === true) {\r\n\t\t\treturn (this.props.messages.length < 1) && (<div>Your message will be the first one</div>)\r\n\t\t} else {\r\n\t\t\treturn (<div>Loading messages...</div>)\r\n\t\t} \r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<StyledSegment>\r\n\t\t\t\t{this.showPlaceholderForMessages()}\r\n\t\t\t\t<Comment.Group>\r\n\t\t\t\t\t{this.renderMessages()}\r\n\t\t\t\t</Comment.Group>\r\n\t\t\t\t<div style={{ float:\"left\", clear: \"both\" }} // Dummy div needed to scroll to the bottom of chat window (scrollToBottom)\r\n\t\t\t\t    ref={el => { this.messagesEnd = el; }} />\r\n\t\t\t</StyledSegment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MessagesList;","import React from 'react';\r\n\r\nimport { Form, Button } from 'semantic-ui-react'\r\n\r\nclass SendMessage extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmessageText: \"\",\r\n\t    };\r\n\t}\r\n\r\n\tonMessageChange = (event) => {\r\n\t\tthis.setState({ messageText: event.target.value });\r\n\t}\r\n\r\n\tonKeyPress = (event) => {\r\n\t    (event.keyCode === 13) && this.sendMessage();\r\n\t}\r\n\r\n\tsendMessage = () => {\r\n\t\tthis.state.messageText && fetch('https://chattychat777.herokuapp.com/sendMessage', {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t    content: this.state.messageText,\r\n\t\t\t    userId: this.props.user.id,\r\n\t\t\t    channelId: this.props.channelId,\r\n\t\t\t})\r\n\t\t})\r\n\t\t.then(() => this.props.getMessages(this.props.channelId))\r\n\t\t.then(() => this.resetInput())\r\n\t}\r\n\r\n\tresetInput = () => {\r\n\t    const resetButton = document.getElementById(\"messageInput\");\r\n\t    resetButton.value = \"\";\r\n\t    this.setState({ messageText: \"\" });\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Form reply>\r\n\t\t\t    <Form.TextArea onChange={this.onMessageChange} onKeyDown={this.onKeyPress} placeholder=\"Message text\" id=\"messageInput\"/>\r\n\t\t\t    <Button onClick={this.sendMessage} content='Send' labelPosition='left' icon='edit' primary />\r\n\t\t\t    <Button onClick={() => {this.props.changeRoute(\"main\")}}>Back</Button>\r\n\t\t\t</Form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SendMessage;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport MessagesList from '../common/messagesList'\r\nimport SendMessage from '../common/sendMessage'\r\n\r\nimport { Container } from 'semantic-ui-react'\r\n\r\n\r\nconst StyledContainer = styled(Container)`\r\n\t&&& {\r\n\t\tmargin-top: 60px;\r\n\t\tmax-width: 800px!important;\r\n\t}\r\n`\r\n\r\nclass Channel extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmessages: [],\r\n\t\t\tmessagesLoaded: false\r\n\t    };\r\n\t    this.eventSource = \"\"\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getMessages();\r\n\t\tthis.setMessagesSSE();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.eventSource.close();\r\n\t}\r\n\r\n\tgetMessages = () => {\r\n\t\tfetch('https://chattychat777.herokuapp.com/messagesList', {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: {'Content-Type': 'application/json'},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t    channelId: this.props.channelId\r\n\t\t\t})\r\n\t\t})\r\n\t\t.then(res => res.json())\r\n\t\t.then(res => this.setState({messages: res, messagesLoaded: true}))\r\n\t}\r\n\r\n\t//Server Sent Events listener that gets messages when sb writes new one\r\n\tsetMessagesSSE = () => { \r\n\t\tconst urlWithChannelId = 'https://chattychat777.herokuapp.com/messagesListSSE/' + this.props.channelId // Allows to send proper SSE messages from server\r\n\t\tthis.eventSource = new EventSource(urlWithChannelId);\r\n\t\tthis.eventSource.onmessage = (e) => {\r\n\t\t\tthis.setState({messages: JSON.parse(e.data)}); \r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<StyledContainer>\r\n\t\t\t\t<MessagesList messages={this.state.messages} messagesLoaded={this.state.messagesLoaded}/>\r\n\t\t\t\t<SendMessage changeRoute={this.props.changeRoute} getMessages={this.getMessages} channelId={this.props.channelId} user={this.props.user}/>\r\n\t\t\t</StyledContainer>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Channel;","export const Theme = {\r\n  color: {\r\n    accent: '#35CC62',\r\n    lightGray: '#878787',\r\n    gray: '#666666',\r\n    darkGray: '#333333',\r\n    background: `#FFFFFF`,\r\n    heroText: `#FFFFFF`,\r\n  },\r\n  layout: {\r\n    contentWidthDesktop: '1240px',\r\n    wrapperPaddingMobile: '80px 20px 0 20px',\r\n    navHeightMobile: '60px',\r\n    navHeightDesktop: '80px',\r\n  },\r\n};","import React, { Component } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport styled from 'styled-components'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport Login from './components/page/login.js';\nimport Register from './components/page/register.js';\nimport Main from './components/page/main.js';\nimport Channel from './components/page/channel.js'\nimport { Theme } from './theme.js';\nimport './fonts.css';\n\nconst MainWrapper = styled.div`\n\tcolor: ${props => props.theme.color.darkGray};\n`\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\troute: \"login\",\n\t\t\tchannelId: 0,\n\t\t\tuser: {}\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.wakeServerUp();\n\t}\n\n\t// Needed because heroku goes to sleep when idle. User will be able to do stuff faster\n\twakeServerUp = () => {\n\t\tfetch('https://chattychat777.herokuapp.com/');\n\t}\n\n\tpickRoute = () => {\n\t\tif (this.state.route === \"register\") {\n\t\t\treturn (<Register changeRoute={this.changeRoute} saveUserData={this.saveUserData}/>)\n\t\t} else if (this.state.route === \"main\") {\n\t\t\treturn (<Main changeRoute={this.changeRoute} user={this.state.user}/>)\n\t\t} else if (this.state.route === \"login\") {\n\t\t\treturn (<Login changeRoute={this.changeRoute} saveUserData={this.saveUserData}/>)\n\t\t} else if (this.state.route === \"channel\") {\n\t\t\treturn (<Channel changeRoute={this.changeRoute} channelId={this.state.channelId} user={this.state.user}/>)\n\t\t}\n\t}\n\n\tchangeRoute = (newRoute, channelId) => {\n\t\tchannelId && this.setState({channelId: channelId}); // takes channelId of clicked channel from Main component to pass it to Channel\n\t\tthis.setState({route: newRoute});\n\t}\n\n\t// Saving data from db\n\tsaveUserData = (data) => {\n\t\tthis.setState({ user: data})\n\t}\n\n  \trender() {\n\t\treturn (\n\t\t  \t<ThemeProvider theme={Theme}>\n\t\t  \t\t<MainWrapper>\n\t\t  \t\t\t{this.pickRoute()}\n\t\t  \t\t</MainWrapper>\n\t\t  \t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}